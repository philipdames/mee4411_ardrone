<launch>
  <!-- Map arguments -->
  <arg name="frame_id" default="world"
       doc="Frame ID of the world fixed frame"/>
  <arg name="map_filename" default="$(find ardrone_phase1)/config/map0.yaml"
       doc="Filename of the map to load"/>
  
  <!-- MAV simulator arguments -->
  <arg name="mav_name" default="ardrone"
       doc="Type of MAV model to load"/>
  <arg name="world_name" default="basic"
       doc="Gazebo world file to load"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"
       doc="Bring up the Gazebo graphical interface"/>
  <arg name="paused" default="false"
       doc="Start Gazebo paused"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>
  
  <!-- Planner arguments -->
  <arg name="rrt_type" default="rrtstar"
       doc="Variant of RRT to use [rrt, rrtstar, rrt_star_bid, rrt_star_bid_h]"/>
  <arg name="x" default="3.0"
       doc="Initial x position of the MAV"/>
  <arg name="y" default="1.0"
       doc="Initial y position of the MAV"/>
  <arg name="z" default="0.1"
       doc="Initial z position of the MAV"/>
  
  <!-- Map visualization -->
  <node pkg="ardrone_phase1" name="block_vis3d" type="block_vis3d.py"
        output="screen">
    <param name="alpha" value="0.5"/>
    <param name="frame_id" value="$(arg frame_id)"/>
    <rosparam command="load" file="$(arg map_filename)"/>
  </node>

  <!-- Gazebo simulator -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  
  <!-- rviz visualizations -->
  <node name="rviz" pkg="rviz" type="rviz" output="screen" 
        args="-d $(find ardrone_phase1)/rviz/phase1.rviz"/>

  <!-- MAV nodes -->
  <group ns="$(arg mav_name)">
    <!-- Robot model -->
    <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find rotors_description)/urdf/$(arg mav_name).xacro' namespace:=$(arg mav_name)" />
    <param name="robot_description" command="$(arg urdf_file)" /> 
    
    <!-- Add MAV to Gazebo -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
    </include>
    
    <!-- Set up TF publishers -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    
    <!-- Planner node -->
    <node name="rrt_planner_node" pkg="ardrone_phase1" type="rrt_planner_node.py" output="screen">
      <param name="rrt_type" value="$(arg rrt_type)"/>
      <param name="map_frame_id" value="$(arg frame_id)"/>
      <rosparam command="load" file="$(arg map_filename)" />
    </node>
  </group>
</launch>
